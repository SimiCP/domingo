1.

for( int k=0, j=n-1;  k<j;  k++,j-- )
{
  int temp = a[k];
  a[k] = a[j];
  a[j] = temp;
}


--------------------

2.  make a "Line" class --- like a line of people

public void add( Person p)
{
  a[n] = p;
  n++;
}

[3a] this add method is O( 1 )

public Person serve()
{
  Person temp = a[0]; 

  for(int k=1; k<n; k++ )
  {
    a[k-1] = a[k];
  }

  n--;
  return temp;
}

[3a] this serve method is O(n)

3.  a.  --- see above

    b.  2+4+6+...+2n = O(n^2)
        
    extra:  2+4+6+...+n=O(n^2)

    c.  O(n^2)

4.  

public int countFood( Sack1 sack )
{
   int count = 0;

   sack.initForTraverse();
   while( sack.hasNext() )
   {
     Block b = sack.next();
     if( b.getKind().equals( "food" ) )
       count++;    
   }

   return count;
}

Bonus problem:  count foods in a list of Blocks:

public int countFood( WList<Block> list )
{
   int count = 0;

   for( int k=0; k<list.size(); k++ )
   {
     Block b = list.get(k);
     if( b.getKind().equals( "food" ) )
       count++;
   }

   return count;
}

===================================================

5.  ???

-----------

6.  non-recursive---no credit on the test for this!!!

public int sum( int[] a, int first, int last )
{
  int total = 0;

  for( int k=first; k<=last; k++ )
  {
    total += a[k];
  }

  return total;
}

The correct answer:

public int sum( int[] a, int first, int last )
{
  if( first == last )
  {
    return a[first];
  }
  else
  {
    int answerFromAssistant = sum( a, first+1, last );
    return answerFromAssistant + a[first];
  }
}

or:

public int sum( int[] a, int first, int last )
{
  if( first == last )
  {
    return a[first];
  }
  else
  {
    int mid = (first+last)/2;

    int answer1 = sum( a, first, mid );
    int answer2 = sum( a, mid+1, last );

    return answer1 + answer2;
  }
}

public int fact( int n )
{
  if( n==0 )
  {
    return 1;
  }
  else
  {
    return n*fact(n-1);
  }
}

